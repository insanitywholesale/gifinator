//
// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: render.proto

package proto

import (
	grpc_health_v1 "google.golang.org/grpc/health/grpc_health_v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RenderRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// GCS path to write output image into.
	GcsOutputBase string `protobuf:"bytes,1,opt,name=gcs_output_base,json=gcsOutputBase,proto3" json:"gcs_output_base,omitempty"`
	// scene object file (in .obj format) GCS path
	ObjPath string `protobuf:"bytes,2,opt,name=obj_path,json=objPath,proto3" json:"obj_path,omitempty"`
	// assets (like material files and images) to be associated with the object
	Assets []string `protobuf:"bytes,3,rep,name=assets,proto3" json:"assets,omitempty"`
	// scene rotation (in radians)
	Rotation float32 `protobuf:"fixed32,4,opt,name=rotation,proto3" json:"rotation,omitempty"`
	// num iterations
	Iterations    int32 `protobuf:"varint,5,opt,name=iterations,proto3" json:"iterations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RenderRequest) Reset() {
	*x = RenderRequest{}
	mi := &file_render_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderRequest) ProtoMessage() {}

func (x *RenderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_render_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderRequest.ProtoReflect.Descriptor instead.
func (*RenderRequest) Descriptor() ([]byte, []int) {
	return file_render_proto_rawDescGZIP(), []int{0}
}

func (x *RenderRequest) GetGcsOutputBase() string {
	if x != nil {
		return x.GcsOutputBase
	}
	return ""
}

func (x *RenderRequest) GetObjPath() string {
	if x != nil {
		return x.ObjPath
	}
	return ""
}

func (x *RenderRequest) GetAssets() []string {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *RenderRequest) GetRotation() float32 {
	if x != nil {
		return x.Rotation
	}
	return 0
}

func (x *RenderRequest) GetIterations() int32 {
	if x != nil {
		return x.Iterations
	}
	return 0
}

type RenderResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// GCS path image was written to.
	GcsOutput     string `protobuf:"bytes,1,opt,name=gcs_output,json=gcsOutput,proto3" json:"gcs_output,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RenderResponse) Reset() {
	*x = RenderResponse{}
	mi := &file_render_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderResponse) ProtoMessage() {}

func (x *RenderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_render_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderResponse.ProtoReflect.Descriptor instead.
func (*RenderResponse) Descriptor() ([]byte, []int) {
	return file_render_proto_rawDescGZIP(), []int{1}
}

func (x *RenderResponse) GetGcsOutput() string {
	if x != nil {
		return x.GcsOutput
	}
	return ""
}

var File_render_proto protoreflect.FileDescriptor

const file_render_proto_rawDesc = "" +
	"\n" +
	"\frender.proto\x12\tgifinator\x1a\x1bgrpc/health/v1/health.proto\"\xa6\x01\n" +
	"\rRenderRequest\x12&\n" +
	"\x0fgcs_output_base\x18\x01 \x01(\tR\rgcsOutputBase\x12\x19\n" +
	"\bobj_path\x18\x02 \x01(\tR\aobjPath\x12\x16\n" +
	"\x06assets\x18\x03 \x03(\tR\x06assets\x12\x1a\n" +
	"\brotation\x18\x04 \x01(\x02R\brotation\x12\x1e\n" +
	"\n" +
	"iterations\x18\x05 \x01(\x05R\n" +
	"iterations\"/\n" +
	"\x0eRenderResponse\x12\x1d\n" +
	"\n" +
	"gcs_output\x18\x01 \x01(\tR\tgcsOutput2\x9e\x01\n" +
	"\x06Render\x12B\n" +
	"\vRenderFrame\x12\x18.gifinator.RenderRequest\x1a\x19.gifinator.RenderResponse\x12P\n" +
	"\x05Check\x12\".grpc.health.v1.HealthCheckRequest\x1a#.grpc.health.v1.HealthCheckResponseB.Z,gitlab.com/insanitywholesale/gifinator/protob\x06proto3"

var (
	file_render_proto_rawDescOnce sync.Once
	file_render_proto_rawDescData []byte
)

func file_render_proto_rawDescGZIP() []byte {
	file_render_proto_rawDescOnce.Do(func() {
		file_render_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_render_proto_rawDesc), len(file_render_proto_rawDesc)))
	})
	return file_render_proto_rawDescData
}

var file_render_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_render_proto_goTypes = []any{
	(*RenderRequest)(nil),                      // 0: gifinator.RenderRequest
	(*RenderResponse)(nil),                     // 1: gifinator.RenderResponse
	(*grpc_health_v1.HealthCheckRequest)(nil),  // 2: grpc.health.v1.HealthCheckRequest
	(*grpc_health_v1.HealthCheckResponse)(nil), // 3: grpc.health.v1.HealthCheckResponse
}
var file_render_proto_depIdxs = []int32{
	0, // 0: gifinator.Render.RenderFrame:input_type -> gifinator.RenderRequest
	2, // 1: gifinator.Render.Check:input_type -> grpc.health.v1.HealthCheckRequest
	1, // 2: gifinator.Render.RenderFrame:output_type -> gifinator.RenderResponse
	3, // 3: gifinator.Render.Check:output_type -> grpc.health.v1.HealthCheckResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_render_proto_init() }
func file_render_proto_init() {
	if File_render_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_render_proto_rawDesc), len(file_render_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_render_proto_goTypes,
		DependencyIndexes: file_render_proto_depIdxs,
		MessageInfos:      file_render_proto_msgTypes,
	}.Build()
	File_render_proto = out.File
	file_render_proto_goTypes = nil
	file_render_proto_depIdxs = nil
}
